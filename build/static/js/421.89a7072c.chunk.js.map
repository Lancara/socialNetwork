{"version":3,"file":"static/js/421.89a7072c.chunk.js","mappings":"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","sources":["components/Profile/Post/Post.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx","components/Profile/ProfileStatus/ProfileStatus.jsx","components/Profile/ProfileStatus/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo.jsx","components/Profile/ProfileObert.jsx","components/Profile/ProfileBossContainer.jsx"],"sourcesContent":["import React from 'react';\r\nimport classes from './Post.module.css'\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div>\r\n\r\n            <div className={classes.col}>\r\n                {props.message}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Post;","import React from 'react';\r\nimport Post from \"./Post/Post\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport {Textarea} from \"../Common/FormsControls/FormsControls\";\r\n\r\n//sd\r\nconst  Profile = React.memo(props =>  {\r\n\r\n    let postElements2 =\r\n        props.posts.map(p => <Post message={p.message} /*key = {p.id}*//>);\r\n\r\n    let newPostElement = React.createRef();\r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <p></p>\r\n            </div>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div>\r\n                {postElements2}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddNewPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name=\"newPostText\" component={Textarea}\r\n                validate={[required, maxLength10]} />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nlet AddNewPostFormRedux = reduxForm({form: \"ProfileAddNewPostForm\"})(AddNewPostForm);\r\nexport default Profile;","import React from 'react';\r\nimport {addPostActionCreator} from \"../../redux/profile-reducer\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n\r\n    return{\r\n        profile: state.profilePage.profile,\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        addPost:(newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nconst  ProfileContainer = connect(mapStateToProps, mapDispatchToProps) (Profile);\r\n\r\nexport default ProfileContainer;","import React from 'react';\r\n\r\n//клаsсовая компонента\r\n\r\nclass ProfileStatus extends React.Component {\r\n    state = {\r\n        editMode: false // режим редактирования\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        this.setState({   // тип метод для перерисовки , лучше почитать / setState - асинхронин\r\n            editMode: true\r\n        })\r\n}\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        });\r\n        this.props.updateStatus(this.state.status);\r\n    }\r\n    onStatusChange = (e) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) { // компонент перерисовывается если меняеться локал стейт либо  из вне, prevProps, prevState просто приходят\r\n        if (prevProps.status !== this.props.status){\r\n            this.setState({\r\n                status: this.props.status\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.editMode &&\r\n                    <div>\r\n                        <span onDoubleClick={this.activateEditMode }>{this.props.status || \"____\"}</span>\r\n                    </div>\r\n                }\r\n                {this.state.editMode &&\r\n                    <div>\r\n                        <input onChange={this.onStatusChange} autoFocus={true} onBlur={this.deactivateEditMode}\r\n                               value={this.state.status}/>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default ProfileStatus;","import React, {useEffect, useState} from 'react';\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false); // destructuring assigment. присвоили значения  массива useState в массив [editMode, setEditMode]. false первоначальное знач первого элемента массива useState\r\n    let [status, setStatus] = useState(props.status); // использ для  локального статуса\r\n\r\n    useEffect( () => { // синхронизируем локал стейт и данные из пропсов , визывается после отрисовки компоненты , (если компонента отрисовалась но в тот момент в пропсах еще не пришли нужные данные, то после всей отрисовки выз этот хук )\r\n        setStatus(props.status);\r\n    }, [props.status]) // если при очередной отрисовки props.status будет другой чем он был раньше то запусти useEffect, это наша зависимость от пришедших пропсов, если ее убрать то этот хук будет выз после каждой отрисовки ,\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n         props.updateStatus(status);\r\n    }\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value) // изменяем локальный статус по одному символу\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}> {props.status || \"____\"}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange}\r\n                           autoFocus={true}\r\n                           onBlur={deactivateEditMode}\r\n                           value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport Infinity from \"../Common/Infinity/Infinity\";\r\nimport ProfileStatus from \"./ProfileStatus/ProfileStatus\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatus/ProfileStatusWithHooks\";\r\n\r\nconst ProfileInfo = (props) => {\r\n    if(!props.profile){\r\n        return <Infinity/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img src={props.profile.photos.large} />\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport ProfileContainer from \"./ProfileContainer\";\r\nimport ProfileInfo from \"./ProfileInfo\";\r\n\r\nconst ProfileObert = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <ProfileContainer />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileObert;","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUsersProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport ProfileObert from \"./ProfileObert\";\r\n\r\nclass ProfileBossContainer extends React.Component {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId; // метод позволяющий получить userId использ withRouter\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId){\r\n                this.props.history.push(\"login\"); // history.push позволяет перебрасивать на другую страницу\r\n            }\r\n        }\r\n        this.props.getUsersProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ProfileObert {...this.props}\r\n                              profile={this.props.profile}\r\n                              status={this.props.status}\r\n                              updateStatus={this.props.updateStatus}/>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status:state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUsersProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    )(ProfileBossContainer)\r\n\r\n\r\n/*\r\nlet AuthRedirectComponent = withAuthRedirect(ProfileBossContainer);// это хок\r\nlet WithUrlDataContainerComponent = withRouter(AuthRedirectComponent);\r\nexport default connect(mapStateToProps, {getUsersProfile}) (WithUrlDataContainerComponent);*/\r\n"],"names":["props","className","classes","message","Profile","React","postElements2","posts","map","p","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","name","component","Textarea","validate","required","connect","state","profile","profilePage","dispatch","addPostActionCreator","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","src","photos","large","ProfileBossContainer","userId","this","match","params","authorizedUserId","history","push","getUsersProfile","getStatus","compose","auth","id","isAuth","withRouter"],"sourceRoot":""}