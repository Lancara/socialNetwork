{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lnc\\\\WebstormProjects\\\\untitled1\\\\src\\\\components\\\\Common\\\\FormsControls\\\\FormsControls.js\";\n// штука для Textarea в form\nimport React from \"react\";\nimport styles from \"./FormsControls.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FormControl = _ref => {\n  let {\n    input,\n    meta,\n    child,\n    ...props\n  } = _ref;\n  const hasError = meta.touched && meta.error; //в методе meta есть свойства touched (показывает тыкнули на поле или нет)\n  // error показывает есть ошибка или нет , и если поле трогали и есть ошибка (не чего не ввели )\n  // то подсветиться красным и показать сообщение meta.error (в нем сидит текст ошибки)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.formControl + \" \" + (hasError ? styles.error : \" \"),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"element\", { ...input,\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this), hasError && /*#__PURE__*/_jsxDEV(\"span\", {\n      children: meta.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 26\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this);\n};\n\n_c = FormControl;\nexport const Textarea = props => {\n  return /*#__PURE__*/_jsxDEV(FormControl, { ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 12\n  }, this);\n};\n_c2 = Textarea;\nexport const Input = _ref2 => {\n  let {\n    input,\n    meta,\n    ...props\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(FormControl, { ...props,\n    children: /*#__PURE__*/_jsxDEV(\"imput\", { ...input,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 12\n  }, this);\n};\n_c3 = Input;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"FormControl\");\n$RefreshReg$(_c2, \"Textarea\");\n$RefreshReg$(_c3, \"Input\");","map":{"version":3,"sources":["C:/Users/lnc/WebstormProjects/untitled1/src/components/Common/FormsControls/FormsControls.js"],"names":["React","styles","FormControl","input","meta","child","props","hasError","touched","error","formControl","Textarea","Input"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;;;AAEA,MAAMC,WAAW,GAAG,QAAoC;AAAA,MAAnC;AAACC,IAAAA,KAAD;AAAQC,IAAAA,IAAR;AAAcC,IAAAA,KAAd;AAAqB,OAAGC;AAAxB,GAAmC;AAEpD,QAAMC,QAAQ,GAAGH,IAAI,CAACI,OAAL,IAAgBJ,IAAI,CAACK,KAAtC,CAFoD,CAGpD;AACA;AACA;;AACA,sBACI;AAAK,IAAA,SAAS,EAAER,MAAM,CAACS,WAAP,GAAqB,GAArB,IAA4BH,QAAQ,GAAGN,MAAM,CAACQ,KAAV,GAAkB,GAAtD,CAAhB;AAAA,4BACI;AAAA,6BACI,wBAAaN,KAAb;AAAA,WAAwBG;AAAxB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,EAIKC,QAAQ,iBAAI;AAAA,gBAAOH,IAAI,CAACK;AAAZ;AAAA;AAAA;AAAA;AAAA,YAJjB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CAdD;;KAAMP,W;AAgBN,OAAO,MAAMS,QAAQ,GAAIL,KAAD,IAAW;AAC/B,sBAAO,QAAC,WAAD,OAAiBA;AAAjB;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CAFM;MAAMK,Q;AAIb,OAAO,MAAMC,KAAK,GAAG,SAA6B;AAAA,MAA5B;AAACT,IAAAA,KAAD;AAAQC,IAAAA,IAAR;AAAc,OAAGE;AAAjB,GAA4B;AAC9C,sBAAO,QAAC,WAAD,OAAiBA,KAAjB;AAAA,2BACH,sBAAWH,KAAX;AAAA,SAAsBG;AAAtB;AAAA;AAAA;AAAA;AAAA;AADG;AAAA;AAAA;AAAA;AAAA,UAAP;AAGH,CAJM;MAAMM,K","sourcesContent":["// штука для Textarea в form\r\nimport React from \"react\";\r\nimport styles from \"./FormsControls.module.css\";\r\n\r\nconst FormControl = ({input, meta, child, ...props}) => {\r\n\r\n    const hasError = meta.touched && meta.error;\r\n    //в методе meta есть свойства touched (показывает тыкнули на поле или нет)\r\n    // error показывает есть ошибка или нет , и если поле трогали и есть ошибка (не чего не ввели )\r\n    // то подсветиться красным и показать сообщение meta.error (в нем сидит текст ошибки)\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \" \")}>\r\n            <div>\r\n                <element {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props) => {\r\n    return <FormControl {...props}></FormControl>\r\n}\r\n\r\nexport const Input = ({input, meta, ...props}) => {\r\n    return <FormControl {...props}>\r\n        <imput {...input} {...props}/>\r\n    </FormControl>\r\n}"]},"metadata":{},"sourceType":"module"}