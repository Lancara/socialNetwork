{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\lnc\\\\WebstormProjects\\\\untitled1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";import _createClass from\"C:\\\\Users\\\\lnc\\\\WebstormProjects\\\\untitled1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";import _inherits from\"C:\\\\Users\\\\lnc\\\\WebstormProjects\\\\untitled1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";import _createSuper from\"C:\\\\Users\\\\lnc\\\\WebstormProjects\\\\untitled1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createSuper.js\";import React from'react';//клаsсовая компонента\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ProfileStatus=/*#__PURE__*/function(_React$Component){_inherits(ProfileStatus,_React$Component);var _super=_createSuper(ProfileStatus);function ProfileStatus(){var _this;_classCallCheck(this,ProfileStatus);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={editMode:false// режим редактирования\n};_this.activateEditMode=function(){_this.setState({// тип метод для перерисовки , лучше почитать / setState - асинхронин\neditMode:true});};_this.deactivateEditMode=function(){_this.setState({editMode:false});_this.props.updateStatus(_this.state.status);};_this.onStatusChange=function(e){_this.setState({status:e.currentTarget.value});};return _this;}_createClass(ProfileStatus,[{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps,prevState){// компонент перерисовывается если меняеться локал стейт либо  из вне, prevProps, prevState просто приходят\nif(prevProps.status!==this.props.status){this.setState({status:this.props.status});}}},{key:\"render\",value:function render(){return/*#__PURE__*/_jsxs(\"div\",{children:[!this.state.editMode&&/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"span\",{onDoubleClick:this.activateEditMode,children:this.props.status||\"____\"})}),this.state.editMode&&/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"input\",{onChange:this.onStatusChange,autoFocus:true,onBlur:this.deactivateEditMode,value:this.state.status})})]});}}]);return ProfileStatus;}(React.Component);export default ProfileStatus;","map":{"version":3,"sources":["C:/Users/lnc/WebstormProjects/untitled1/src/components/Profile/ProfileStatus/ProfileStatus.jsx"],"names":["React","ProfileStatus","state","editMode","activateEditMode","setState","deactivateEditMode","props","updateStatus","status","onStatusChange","e","currentTarget","value","prevProps","prevState","Component"],"mappings":"4gBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA;2FAEMC,CAAAA,a,mWACFC,K,CAAQ,CACJC,QAAQ,CAAE,KAAM;AADZ,C,OAIRC,gB,CAAmB,UAAM,CACrB,MAAKC,QAAL,CAAc,CAAI;AACdF,QAAQ,CAAE,IADA,CAAd,EAGP,C,OACGG,kB,CAAqB,UAAM,CACvB,MAAKD,QAAL,CAAc,CACVF,QAAQ,CAAE,KADA,CAAd,EAGA,MAAKI,KAAL,CAAWC,YAAX,CAAwB,MAAKN,KAAL,CAAWO,MAAnC,EACH,C,OACDC,c,CAAiB,SAACC,CAAD,CAAO,CACpB,MAAKN,QAAL,CAAc,CACVI,MAAM,CAAEE,CAAC,CAACC,aAAF,CAAgBC,KADd,CAAd,EAGH,C,2EAED,4BAAmBC,SAAnB,CAA8BC,SAA9B,CAAyC,CAAE;AACvC,GAAID,SAAS,CAACL,MAAV,GAAqB,KAAKF,KAAL,CAAWE,MAApC,CAA2C,CACvC,KAAKJ,QAAL,CAAc,CACVI,MAAM,CAAE,KAAKF,KAAL,CAAWE,MADT,CAAd,EAGH,CACJ,C,sBAED,iBAAS,CACL,mBACI,uBACK,CAAC,KAAKP,KAAL,CAAWC,QAAZ,eACG,kCACI,aAAM,aAAa,CAAE,KAAKC,gBAA1B,UAA8C,KAAKG,KAAL,CAAWE,MAAX,EAAqB,MAAnE,EADJ,EAFR,CAMK,KAAKP,KAAL,CAAWC,QAAX,eACG,kCACI,cAAO,QAAQ,CAAE,KAAKO,cAAtB,CAAsC,SAAS,CAAE,IAAjD,CAAuD,MAAM,CAAE,KAAKJ,kBAApE,CACO,KAAK,CAAE,KAAKJ,KAAL,CAAWO,MADzB,EADJ,EAPR,GADJ,CAeH,C,2BA9CuBT,KAAK,CAACgB,S,EAiDlC,cAAef,CAAAA,aAAf","sourcesContent":["import React from 'react';\r\n\r\n//клаsсовая компонента\r\n\r\nclass ProfileStatus extends React.Component {\r\n    state = {\r\n        editMode: false // режим редактирования\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        this.setState({   // тип метод для перерисовки , лучше почитать / setState - асинхронин\r\n            editMode: true\r\n        })\r\n}\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        });\r\n        this.props.updateStatus(this.state.status);\r\n    }\r\n    onStatusChange = (e) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) { // компонент перерисовывается если меняеться локал стейт либо  из вне, prevProps, prevState просто приходят\r\n        if (prevProps.status !== this.props.status){\r\n            this.setState({\r\n                status: this.props.status\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.editMode &&\r\n                    <div>\r\n                        <span onDoubleClick={this.activateEditMode }>{this.props.status || \"____\"}</span>\r\n                    </div>\r\n                }\r\n                {this.state.editMode &&\r\n                    <div>\r\n                        <input onChange={this.onStatusChange} autoFocus={true} onBlur={this.deactivateEditMode}\r\n                               value={this.state.status}/>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default ProfileStatus;"]},"metadata":{},"sourceType":"module"}