{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lnc\\\\WebstormProjects\\\\untitled1\\\\src\\\\components\\\\Common\\\\FormsControls\\\\FormsControls.js\";\n// штука для Textarea в form\nimport React from \"react\";\nimport styles from \"./FormsControls.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FormControl = _ref => {\n  let {\n    input,\n    meta,\n    child,\n    ...props\n  } = _ref;\n  const hasError = meta.touched && meta.error; //в методе meta есть свойства touched (показывает тыкнули на поле или нет)\n  // error показывает есть ошибка или нет , и если поле трогали и есть ошибка (не чего не ввели )\n  // то подсветиться красным и показать сообщение meta.error (в нем сидит текст ошибки)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.formControl + \" \" + (hasError ? styles.error : \" \"),\n    children: [\"// \\u043F\\u0440\\u0438 \\u043E\\u0448\\u0438\\u0431\\u043A\\u0435 \\u0432\\u0438\\u0432\\u0435\\u0434\\u0435\\u0442 className\", /*#__PURE__*/_jsxDEV(\"div\", {\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this), hasError && /*#__PURE__*/_jsxDEV(\"span\", {\n      children: meta.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 26\n    }, this), \" // \\u043F\\u0440\\u0438 \\u043E\\u0448\\u0438\\u0431\\u043A\\u0435 \\u0432\\u0438\\u0432\\u0435\\u0434\\u0435\\u0442 meta.error (\\u0432 \\u043D\\u0435\\u043C \\u0441\\u0438\\u0434\\u0438\\u0442 \\u0442\\u0435\\u043A\\u0441\\u0442 \\u043E\\u0448\\u0438\\u0431\\u043A\\u0438)\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this);\n};\n\n_c = FormControl;\nexport const Textarea = props => {\n  const {\n    input,\n    meta,\n    child,\n    ...restProps\n  } = props;\n  return /*#__PURE__*/_jsxDEV(FormControl, { ...props,\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"textarea\", { ...input,\n      ...restProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 38\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 12\n  }, this);\n};\n_c2 = Textarea;\nexport const Input = props => {\n  const {\n    input,\n    meta,\n    child,\n    ...restProps\n  } = props;\n  return /*#__PURE__*/_jsxDEV(FormControl, { ...props,\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"input\", { ...input,\n      ...restProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 38\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 12\n  }, this);\n};\n/*\r\nconst FormControl = ({props}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \" \")}>// при ошибке виведет className\r\n            <div>\r\n                <textarea {...input} {...props} возращаем деструкт\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>} // при ошибке виведет meta.error (в нем сидит текст ошибки)\r\n        </div>\r\n    )\r\n}\r\n*/\n\n_c3 = Input;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"FormControl\");\n$RefreshReg$(_c2, \"Textarea\");\n$RefreshReg$(_c3, \"Input\");","map":{"version":3,"sources":["C:/Users/lnc/WebstormProjects/untitled1/src/components/Common/FormsControls/FormsControls.js"],"names":["React","styles","FormControl","input","meta","child","props","hasError","touched","error","formControl","children","Textarea","restProps","Input"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;;;AAEA,MAAMC,WAAW,GAAG,QAAoC;AAAA,MAAnC;AAACC,IAAAA,KAAD;AAAQC,IAAAA,IAAR;AAAcC,IAAAA,KAAd;AAAqB,OAAGC;AAAxB,GAAmC;AAEpD,QAAMC,QAAQ,GAAGH,IAAI,CAACI,OAAL,IAAgBJ,IAAI,CAACK,KAAtC,CAFoD,CAGpD;AACA;AACA;;AACA,sBACI;AAAK,IAAA,SAAS,EAAER,MAAM,CAACS,WAAP,GAAqB,GAArB,IAA4BH,QAAQ,GAAGN,MAAM,CAACQ,KAAV,GAAkB,GAAtD,CAAhB;AAAA,+IACI;AAAA,gBACKH,KAAK,CAACK;AADX;AAAA;AAAA;AAAA;AAAA,YADJ,EAIKJ,QAAQ,iBAAI;AAAA,gBAAOH,IAAI,CAACK;AAAZ;AAAA;AAAA;AAAA;AAAA,YAJjB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CAdD;;KAAMP,W;AAgBN,OAAO,MAAMU,QAAQ,GAAIN,KAAD,IAAW;AAC/B,QAAM;AAACH,IAAAA,KAAD;AAAQC,IAAAA,IAAR;AAAcC,IAAAA,KAAd;AAAqB,OAAGQ;AAAxB,MAAqCP,KAA3C;AACA,sBAAO,QAAC,WAAD,OAAiBA,KAAjB;AAAA,iCAA0B,yBAAcH,KAAd;AAAA,SAAyBU;AAAzB;AAAA;AAAA;AAAA;AAAA,YAA1B;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CAHM;MAAMD,Q;AAKb,OAAO,MAAME,KAAK,GAAIR,KAAD,IAAW;AAC5B,QAAM;AAACH,IAAAA,KAAD;AAAQC,IAAAA,IAAR;AAAcC,IAAAA,KAAd;AAAqB,OAAGQ;AAAxB,MAAqCP,KAA3C;AACA,sBAAO,QAAC,WAAD,OAAkBA,KAAlB;AAAA,iCAA0B,sBAAWH,KAAX;AAAA,SAAsBU;AAAtB;AAAA;AAAA;AAAA;AAAA,YAA1B;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CAHM;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAhBaC,K","sourcesContent":["// штука для Textarea в form\r\nimport React from \"react\";\r\nimport styles from \"./FormsControls.module.css\";\r\n\r\nconst FormControl = ({input, meta, child, ...props}) => {\r\n\r\n    const hasError = meta.touched && meta.error;\r\n    //в методе meta есть свойства touched (показывает тыкнули на поле или нет)\r\n    // error показывает есть ошибка или нет , и если поле трогали и есть ошибка (не чего не ввели )\r\n    // то подсветиться красным и показать сообщение meta.error (в нем сидит текст ошибки)\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \" \")}>// при ошибке виведет className\r\n            <div>\r\n                {props.children}\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>} // при ошибке виведет meta.error (в нем сидит текст ошибки)\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props} > <textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl  {...props}> <input {...input} {...restProps} /> </FormControl>\r\n}\r\n/*\r\nconst FormControl = ({props}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \" \")}>// при ошибке виведет className\r\n            <div>\r\n                <textarea {...input} {...props} возращаем деструкт\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>} // при ошибке виведет meta.error (в нем сидит текст ошибки)\r\n        </div>\r\n    )\r\n}\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}