{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lnc\\\\WebstormProjects\\\\untitled1\\\\src\\\\components\\\\Users\\\\UsersContainer.jsx\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { follow, unfollow, setUsers, setCurrentPage, setTotalUsersCount, toggleIsFetching } from \"../../redux/users-reducer\";\nimport axios from \"axios\";\nimport Users from \"./users\";\nimport Infinity from '../Common/Infinity/Infinity';\nimport { getUsers } from \"../../api/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass UsersContainer extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.onPageChanged = pageNumber => {\n      this.props.setCurrentPage(pageNumber);\n      this.props.toggleIsFetching(true);\n      axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`, {\n        withCredentials: true\n      }).then(response => {\n        this.props.setUsers(response.data.items);\n        this.props.toggleIsFetching(false);\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.toggleIsFetching(true);\n    getUsers(this.props.currentPage, this.props.pageSize).then(response => {\n      this.props.toggleIsFetching(false);\n      this.props.setUsers(response.data.items);\n      this.props.setTotalUsersCount(response.data.totalCount);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [this.props.isFetching ? /*#__PURE__*/_jsxDEV(Infinity, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 38\n      }, this) : null, /*#__PURE__*/_jsxDEV(Users, {\n        totalUsersCount: this.props.totalUsersCount,\n        pageSize: this.props.pageSize,\n        currentPage: this.props.currentPage,\n        onPageChanged: this.onPageChanged,\n        follow: this.props.follow,\n        unfollow: this.props.unfollow,\n        users: this.props.users\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nlet mapStateToProps = state => {\n  return {\n    users: state.usersPage.users,\n    pageSize: state.usersPage.pageSize,\n    totalUsersCount: state.usersPage.totalUsersCount,\n    currentPage: state.usersPage.currentPage,\n    isFetching: state.usersPage.isFetching\n  };\n};\n/*let mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        follow: (userID) => {\r\n            dispatch(followAC(userID));\r\n        },\r\n        unfollow: (userID) => {\r\n            dispatch(unfollowAC(userID));\r\n        },\r\n        setUsers: (users) => {\r\n            dispatch(setUsersAC(users));\r\n        },\r\n        setCurrentPage: (pageNumber) => {\r\n            dispatch(setCurrentPageAC(pageNumber))\r\n        },\r\n        setTotalUsersCount: (totalCount) => {\r\n            dispatch(setUsersTotalCountAC(totalCount))\r\n        },\r\n        toggleIsFetching: (isFetching) => {\r\n            dispatch(toggleIsFetchingAC(isFetching))\r\n        }\r\n    }\r\n}*/\n\n\nexport default connect(mapStateToProps, {\n  follow,\n  unfollow,\n  setUsers,\n  setCurrentPage,\n  setTotalUsersCount,\n  toggleIsFetching\n})(UsersContainer);","map":{"version":3,"sources":["C:/Users/lnc/WebstormProjects/untitled1/src/components/Users/UsersContainer.jsx"],"names":["React","connect","follow","unfollow","setUsers","setCurrentPage","setTotalUsersCount","toggleIsFetching","axios","Users","Infinity","getUsers","UsersContainer","Component","onPageChanged","pageNumber","props","get","pageSize","withCredentials","then","response","data","items","componentDidMount","currentPage","totalCount","render","isFetching","totalUsersCount","users","mapStateToProps","state","usersPage"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    follow,\r\n    unfollow,\r\n    setUsers,\r\n    setCurrentPage,\r\n    setTotalUsersCount,\r\n    toggleIsFetching\r\n} from \"../../redux/users-reducer\";\r\nimport axios from \"axios\";\r\nimport Users from \"./users\";\r\nimport Infinity from '../Common/Infinity/Infinity';\r\nimport {getUsers} from \"../../api/api\";\r\n\r\nclass UsersContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.props.toggleIsFetching(true);\r\n\r\n        getUsers(this.props.currentPage, this.props.pageSize) .then(response => {\r\n                this.props.toggleIsFetching(false);\r\n                this.props.setUsers(response.data.items);\r\n                this.props.setTotalUsersCount(response.data.totalCount);\r\n            });\r\n    }\r\n\r\n    onPageChanged = (pageNumber) => {\r\n        this.props.setCurrentPage(pageNumber);\r\n        this.props.toggleIsFetching(true);\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`,{\r\n            withCredentials: true\r\n        })\r\n            .then(response => {\r\n                this.props.setUsers(response.data.items);\r\n                this.props.toggleIsFetching(false);\r\n\r\n            });\r\n    }\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Infinity/> : null}\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                      pageSize={this.props.pageSize}\r\n                      currentPage={this.props.currentPage}\r\n                      onPageChanged={this.onPageChanged}\r\n                      follow={this.props.follow}\r\n                      unfollow={this.props.unfollow}\r\n                      users={this.props.users}\r\n        />\r\n            </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize:state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching:state.usersPage.isFetching,\r\n    }\r\n}\r\n\r\n/*let mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        follow: (userID) => {\r\n            dispatch(followAC(userID));\r\n        },\r\n        unfollow: (userID) => {\r\n            dispatch(unfollowAC(userID));\r\n        },\r\n        setUsers: (users) => {\r\n            dispatch(setUsersAC(users));\r\n        },\r\n        setCurrentPage: (pageNumber) => {\r\n            dispatch(setCurrentPageAC(pageNumber))\r\n        },\r\n        setTotalUsersCount: (totalCount) => {\r\n            dispatch(setUsersTotalCountAC(totalCount))\r\n        },\r\n        toggleIsFetching: (isFetching) => {\r\n            dispatch(toggleIsFetchingAC(isFetching))\r\n        }\r\n    }\r\n}*/\r\n\r\nexport default connect(mapStateToProps, {\r\n    follow,\r\n    unfollow,\r\n    setUsers,\r\n    setCurrentPage,\r\n    setTotalUsersCount,\r\n    toggleIsFetching,\r\n    } ) (UsersContainer);"]},"metadata":{},"sourceType":"module"}