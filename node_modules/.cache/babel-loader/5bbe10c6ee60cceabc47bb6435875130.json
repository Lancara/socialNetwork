{"ast":null,"code":"import { authAPI, securityAPI } from \"../api/api\";\nconst SET_USER_DATA = 'SET_USER_DATA';\nconst GET_CAPTCHA_URL_SUCCESS = 'GET_CAPTCHA_URL_SUCCESS';\nlet initialState = {\n  id: null,\n  email: null,\n  login: null,\n  isAuth: false,\n  //Авторизация\n  captchaUrl: null // if null, the captcha is not required\n\n  /*isFetching: false,*/\n\n};\n\nconst authReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.payload\n      };\n  }\n\n  return state;\n};\n\nexport const setAuthUserData = (id, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    id,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getCaptchaUrlSuccess = captchaUrl => ({\n  type: GET_CAPTCHA_URL_SUCCESS,\n  payload: {\n    captchaUrl\n  }\n});\nexport const getAuthUserData = () => async dispatch => {\n  //результат работы асинхронной функции возрощение промиса( дожидаемся промисса не от then а от await, результат тодже а код короче)\n  let response = await authAPI.me(); // ответ приходит из  authAPI.me (для синтаксиса await) и передает значение в response\n\n  if (response.data.resultCode === 0) {\n    let {\n      id,\n      email,\n      login\n    } = response.data.data;\n    dispatch(setAuthUserData(id, email, login, true));\n  }\n};\nexport const login = (email, password, rememberMe) => async dispatch => {\n  let response = await authAPI.login(email, password, rememberMe);\n\n  if (response.data.resultCode === 0) {\n    dispatch(getAuthUserData());\n  } else if (response.data.resultCode === 10) {\n    dispatch(getCaptchaUrl());\n  }\n};\nexport const getCaptchaUrl = () => async dispatch => {\n  const response = await securityAPI.getCaptchaUrl();\n  const captchaUrl = response.data.url;\n  dispatch(getCaptchaUrlSuccess(captchaUrl));\n}; // пример с then\n\nexport const logout = () => dispatch => {\n  authAPI.logout().then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(setAuthUserData(null, null, null, false));\n    }\n  });\n}; // форм собрала данные мыло лог, передало в санку login оно  сделала запрос на сервер , если ответ положительный вызвали\n// getAuthUserData она сделала еще один запрос на сервер если все ок диспатчит setAuthUserData, добавляеться в стейт\n// потом использ isAuth что бы знать вошли мыв или нет\n\nexport default authReducer;","map":{"version":3,"sources":["C:/Users/lnc/WebstormProjects/untitled1/src/redux/auth-reducer.js"],"names":["authAPI","securityAPI","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","initialState","id","email","login","isAuth","captchaUrl","authReducer","state","action","type","payload","setAuthUserData","getCaptchaUrlSuccess","getAuthUserData","dispatch","response","me","data","resultCode","password","rememberMe","getCaptchaUrl","url","logout","then"],"mappings":"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","sourcesContent":["import {authAPI, securityAPI} from \"../api/api\";\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA';\r\nconst GET_CAPTCHA_URL_SUCCESS = 'GET_CAPTCHA_URL_SUCCESS';\r\n\r\n\r\nlet initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false, //Авторизация\r\n    captchaUrl: null, // if null, the captcha is not required\r\n    /*isFetching: false,*/\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n    }\r\n    return state;\r\n}\r\n\r\nexport const setAuthUserData = (id, email, login, isAuth) => ({\r\n    type: SET_USER_DATA, payload:\r\n        {id, email, login, isAuth}\r\n})\r\nexport const getCaptchaUrlSuccess  = (captchaUrl) => ({\r\n    type: GET_CAPTCHA_URL_SUCCESS, payload:\r\n        {captchaUrl}\r\n})\r\n\r\nexport const getAuthUserData = () => async (dispatch) => { //результат работы асинхронной функции возрощение промиса( дожидаемся промисса не от then а от await, результат тодже а код короче)\r\n    let response = await authAPI.me(); // ответ приходит из  authAPI.me (для синтаксиса await) и передает значение в response\r\n\r\n    if (response.data.resultCode === 0) {\r\n        let {id, email, login} = response.data.data;\r\n        dispatch(setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\n\r\nexport const login = (email, password, rememberMe) => async (dispatch) => {\r\n    let response = await authAPI.login(email, password, rememberMe)\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserData())\r\n    }\r\n    else if (response.data.resultCode === 10){\r\n        dispatch( getCaptchaUrl())\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = () => async (dispatch) => {\r\n    const response = await securityAPI.getCaptchaUrl()\r\n    const captchaUrl = response.data.url;\r\n\r\n    dispatch(getCaptchaUrlSuccess(captchaUrl));\r\n}\r\n// пример с then\r\nexport const logout = () => (dispatch) => {\r\n    authAPI.logout()\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setAuthUserData(null, null, null, false));\r\n            }\r\n        });\r\n}\r\n// форм собрала данные мыло лог, передало в санку login оно  сделала запрос на сервер , если ответ положительный вызвали\r\n// getAuthUserData она сделала еще один запрос на сервер если все ок диспатчит setAuthUserData, добавляеться в стейт\r\n// потом использ isAuth что бы знать вошли мыв или нет\r\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}