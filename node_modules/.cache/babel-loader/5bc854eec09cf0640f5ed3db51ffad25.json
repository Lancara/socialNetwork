{"ast":null,"code":"import { authAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = 'SET_USER_DATA';\nlet initialState = {\n  id: null,\n  email: null,\n  login: null,\n  isAuth: false //Авторизация\n\n  /*isFetching: false,*/\n\n};\n\nconst authReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.payload\n      };\n  }\n\n  return state;\n};\n\nexport const setAuthUserData = (id, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    id,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getAuthUserData = () => async dispatch => {\n  //результат работы асинхронной функции  дожидаемся промисса не от then а от await, результат тодже а код короче\n  let response = await authAPI.me(); // ответ приходит из промиса authAPI.me (для синтаксиса await) и передает значение в response\n\n  if (response.data.resultCode === 0) {\n    let {\n      id,\n      email,\n      login\n    } = response.data.data;\n    dispatch(setAuthUserData(id, email, login, true));\n  }\n};\nexport const login = (email, password, rememberMe) => dispatch => {\n  authAPI.login(email, password, rememberMe).then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(getAuthUserData());\n    }\n  });\n};\nexport const logout = () => dispatch => {\n  authAPI.logout().then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(setAuthUserData(null, null, null, false));\n    }\n  });\n}; // форм собрала данные мыло лог, передало в санку login оно  сделала запрос на сервер , если ответ положительный вызвали\n// getAuthUserData она сделала еще один запрос на сервер если все ок диспатчит setAuthUserData, добавляеться в стейт\n// потом использ isAuth что бы знать вошли мыв или нет\n\nexport default authReducer;","map":{"version":3,"sources":["C:/Users/lnc/WebstormProjects/untitled1/src/redux/auth-reducer.js"],"names":["authAPI","stopSubmit","SET_USER_DATA","initialState","id","email","login","isAuth","authReducer","state","action","type","payload","setAuthUserData","getAuthUserData","dispatch","response","me","data","resultCode","password","rememberMe","then","logout"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,YAAtB;AACA,SAAQC,UAAR,QAAyB,YAAzB;AAEA,MAAMC,aAAa,GAAG,eAAtB;AAGA,IAAIC,YAAY,GAAG;AACfC,EAAAA,EAAE,EAAE,IADW;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE,KAJO,CAIA;;AACf;;AALe,CAAnB;;AAQA,MAAMC,WAAW,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBN,YAAyB;AAAA,MAAXO,MAAW;;AAElD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,aAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEH,WAAGC,MAAM,CAACE;AAFP,OAAP;AAFR;;AAOA,SAAOH,KAAP;AACH,CAVD;;AAYA,OAAO,MAAMI,eAAe,GAAG,CAACT,EAAD,EAAKC,KAAL,EAAYC,KAAZ,EAAmBC,MAAnB,MAA+B;AAC1DI,EAAAA,IAAI,EAAET,aADoD;AACrCU,EAAAA,OAAO,EACxB;AAACR,IAAAA,EAAD;AAAKC,IAAAA,KAAL;AAAYC,IAAAA,KAAZ;AAAmBC,IAAAA;AAAnB;AAFsD,CAA/B,CAAxB;AAKP,OAAO,MAAMO,eAAe,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAAE;AACxD,MAAIC,QAAQ,GAAG,MAAMhB,OAAO,CAACiB,EAAR,EAArB,CADsD,CACnB;;AAE9B,MAAID,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChC,QAAI;AAACf,MAAAA,EAAD;AAAKC,MAAAA,KAAL;AAAYC,MAAAA;AAAZ,QAAqBU,QAAQ,CAACE,IAAT,CAAcA,IAAvC;AACAH,IAAAA,QAAQ,CAACF,eAAe,CAACT,EAAD,EAAKC,KAAL,EAAYC,KAAZ,EAAmB,IAAnB,CAAhB,CAAR;AACH;AACR,CAPM;AAQP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAQe,QAAR,EAAkBC,UAAlB,KAAkCN,QAAD,IAAc;AAChEf,EAAAA,OAAO,CAACM,KAAR,CAAcD,KAAd,EAAqBe,QAArB,EAA+BC,UAA/B,EACKC,IADL,CACUN,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChCJ,MAAAA,QAAQ,CAACD,eAAe,EAAhB,CAAR;AACH;AACJ,GALL;AAMH,CAPM;AAQP,OAAO,MAAMS,MAAM,GAAG,MAAOR,QAAD,IAAc;AACtCf,EAAAA,OAAO,CAACuB,MAAR,GACKD,IADL,CACUN,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChCJ,MAAAA,QAAQ,CAACF,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAhB,CAAR;AACH;AACJ,GALL;AAMH,CAPM,C,CAQP;AACA;AACA;;AACA,eAAeL,WAAf","sourcesContent":["import {authAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA';\r\n\r\n\r\nlet initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false, //Авторизация\r\n    /*isFetching: false,*/\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n    }\r\n    return state;\r\n}\r\n\r\nexport const setAuthUserData = (id, email, login, isAuth) => ({\r\n    type: SET_USER_DATA, payload:\r\n        {id, email, login, isAuth}\r\n})\r\n\r\nexport const getAuthUserData = () => async (dispatch) => { //результат работы асинхронной функции  дожидаемся промисса не от then а от await, результат тодже а код короче\r\n   let response = await authAPI.me(); // ответ приходит из промиса authAPI.me (для синтаксиса await) и передает значение в response\r\n\r\n        if (response.data.resultCode === 0) {\r\n            let {id, email, login} = response.data.data;\r\n            dispatch(setAuthUserData(id, email, login, true));\r\n        }\r\n}\r\nexport const login = (email, password, rememberMe) => (dispatch) => {\r\n    authAPI.login(email, password, rememberMe)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(getAuthUserData())\r\n            }\r\n        });\r\n}\r\nexport const logout = () => (dispatch) => {\r\n    authAPI.logout()\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setAuthUserData(null, null, null, false));\r\n            }\r\n        });\r\n}\r\n// форм собрала данные мыло лог, передало в санку login оно  сделала запрос на сервер , если ответ положительный вызвали\r\n// getAuthUserData она сделала еще один запрос на сервер если все ок диспатчит setAuthUserData, добавляеться в стейт\r\n// потом использ isAuth что бы знать вошли мыв или нет\r\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}