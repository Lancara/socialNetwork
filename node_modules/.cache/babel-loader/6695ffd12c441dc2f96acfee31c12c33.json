{"ast":null,"code":"const ADD_POST = 'ADD-POST';\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\nconst UPDATE_NEW_MESSAGE_BODY = 'UPDATE-NEW-MESSAGE_BODY';\nconst SEND_MESSAGE = 'SEND_MESSAGE';\nconst SEND_CAR = 'SEND_CAR';\nconst UPDATE_NEW_MESSAGE_CAR = 'UPDATE_NEW_MESSAGE_CAR';\nlet store = {\n  _state: {\n    dialogsData: [{\n      id: 1,\n      name: 'Dima'\n    }, {\n      id: 2,\n      name: 'Andre'\n    }, {\n      id: 3,\n      name: 'Sasha'\n    }],\n    messagesData: [{\n      id: 1,\n      message: 'hi'\n    }, {\n      id: 2,\n      message: 'hi'\n    }, {\n      id: 3,\n      message: 'hi'\n    }, {\n      id: 4,\n      message: 'hi'\n    }],\n    posts: [{\n      id: 1,\n      message: 'hi'\n    }, {\n      id: 2,\n      message: 'ho'\n    }],\n    messagesCar: [{\n      id: 1,\n      message: 'BMW'\n    }],\n    newPostText: ' re',\n    newMessageBody: ' ',\n    newPostCar: ' '\n  },\n\n  _callSubscriber() {\n    console.log('state is change');\n  },\n\n  getState() {\n    return this._state;\n  },\n\n  subscribe(observer) {\n    this._callSubscriber = observer;\n  },\n\n  dispatch(action) {\n    if (action.type === ADD_POST) {\n      let newPost = {\n        id: 3,\n        message: this._state.newPostText\n        /*likesCount:0*/\n\n      };\n\n      this._state.posts.push(newPost);\n\n      this._state.newPostText = '';\n\n      this._callSubscriber(this._state);\n    } else if (action.type === UPDATE_NEW_POST_TEXT) {\n      this._state.newPostText = action.newText;\n\n      this._callSubscriber(this._state);\n    } else if (action.type === UPDATE_NEW_MESSAGE_BODY) {\n      this._state.newMessageBody = action.body;\n\n      this._callSubscriber(this._state);\n    } else if (action.type === SEND_MESSAGE) {\n      let body = this._state.newMessageBody;\n      this._state.newMessageBody = ' ';\n\n      this._state.messagesData.push({\n        id: 5,\n        message: body\n      });\n\n      this._callSubscriber(this._state);\n    } else if (action.type === SEND_CAR) {\n      let newMessagesCar = {\n        id: 2,\n        message: this._state.newPostCar\n      };\n\n      this._state.messagesCar.push(newMessagesCar);\n\n      this._state.newPostCar = '';\n\n      this._callSubscriber(this._state);\n    } else if (action.type === UPDATE_NEW_MESSAGE_CAR) {\n      this._state.newPostCar = action.newCar;\n\n      this._callSubscriber(this._state);\n    }\n  }\n\n};\nexport const addPostActionCreator = () => {\n  return {\n    type: ADD_POST\n  };\n};\nexport const updateNewPostTextActionCreator = text => {\n  return {\n    type: UPDATE_NEW_POST_TEXT,\n    newText: text\n  };\n};\nexport const sendMessageCreator = () => {\n  return {\n    type: SEND_MESSAGE\n  };\n};\nexport const updateNewMessageBodyCreator = body => {\n  return {\n    type: UPDATE_NEW_MESSAGE_BODY,\n    body: body\n  };\n};\nexport const addPostCarCreator = () => {\n  return {\n    type: SEND_CAR\n  };\n};\nexport const updateNewPostTextCarCreator = newCar => {\n  return {\n    type: UPDATE_NEW_MESSAGE_CAR,\n    newCar: newCar\n  };\n};\nexport default store;\nwindow.state = store;","map":{"version":3,"sources":["C:/Users/lnc/WebstormProjects/untitled1/src/redux/state.js"],"names":["ADD_POST","UPDATE_NEW_POST_TEXT","UPDATE_NEW_MESSAGE_BODY","SEND_MESSAGE","SEND_CAR","UPDATE_NEW_MESSAGE_CAR","store","_state","dialogsData","id","name","messagesData","message","posts","messagesCar","newPostText","newMessageBody","newPostCar","_callSubscriber","console","log","getState","subscribe","observer","dispatch","action","type","newPost","push","newText","body","newMessagesCar","newCar","addPostActionCreator","updateNewPostTextActionCreator","text","sendMessageCreator","updateNewMessageBodyCreator","addPostCarCreator","updateNewPostTextCarCreator","window","state"],"mappings":"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","sourcesContent":["const ADD_POST = 'ADD-POST';\r\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\r\nconst UPDATE_NEW_MESSAGE_BODY = 'UPDATE-NEW-MESSAGE_BODY';\r\nconst SEND_MESSAGE = 'SEND_MESSAGE';\r\n\r\nconst SEND_CAR = 'SEND_CAR';\r\nconst UPDATE_NEW_MESSAGE_CAR = 'UPDATE_NEW_MESSAGE_CAR';\r\n\r\nlet store = {\r\n    _state: {\r\n        dialogsData: [\r\n            {id: 1, name: 'Dima'},\r\n            {id: 2, name: 'Andre'},\r\n            {id: 3, name: 'Sasha'},\r\n        ],\r\n        messagesData: [\r\n            {id: 1, message: 'hi'},\r\n            {id: 2, message: 'hi'},\r\n            {id: 3, message: 'hi'},\r\n            {id: 4, message: 'hi'},\r\n        ],\r\n        posts: [\r\n            {id: 1, message: 'hi'},\r\n            {id: 2, message: 'ho'}\r\n        ],\r\n        messagesCar: [\r\n            {id: 1, message: 'BMW'},\r\n        ],\r\n        newPostText: ' re',\r\n        newMessageBody: ' ',\r\n        newPostCar: ' ',\r\n\r\n    },\r\n    _callSubscriber() {\r\n        console.log('state is change');\r\n    },\r\n    getState() {\r\n        return this._state;\r\n    },\r\n    subscribe(observer) {\r\n        this._callSubscriber = observer;\r\n    },\r\n\r\n    dispatch(action) {\r\n        if (action.type === ADD_POST) {\r\n            let newPost = {\r\n                id: 3,\r\n                message: this._state.newPostText,\r\n                /*likesCount:0*/\r\n            };\r\n            this._state.posts.push(newPost);\r\n            this._state.newPostText = ''\r\n            this._callSubscriber(this._state);\r\n        } else if (action.type === UPDATE_NEW_POST_TEXT) {\r\n            this._state.newPostText = action.newText;\r\n            this._callSubscriber(this._state);\r\n        } else if (action.type === UPDATE_NEW_MESSAGE_BODY) {\r\n            this._state.newMessageBody = action.body;\r\n            this._callSubscriber(this._state);\r\n        } else if (action.type === SEND_MESSAGE) {\r\n            let body = this._state.newMessageBody;\r\n            this._state.newMessageBody = ' ';\r\n            this._state.messagesData.push({id: 5, message: body});\r\n            this._callSubscriber(this._state);\r\n        }\r\n\r\n        else if (action.type === SEND_CAR) {\r\n            let newMessagesCar = {\r\n                id: 2,\r\n                message: this._state.newPostCar,\r\n            };\r\n            this._state.messagesCar.push(newMessagesCar);\r\n            this._state.newPostCar = ''\r\n            this._callSubscriber(this._state);\r\n        } else if (action.type === UPDATE_NEW_MESSAGE_CAR) {\r\n            this._state.newPostCar = action.newCar;\r\n            this._callSubscriber(this._state);\r\n        }\r\n    }\r\n}\r\n\r\nexport const addPostActionCreator = () => {\r\n    return {\r\n        type: ADD_POST\r\n    }\r\n}\r\nexport const updateNewPostTextActionCreator = (text) => {\r\n    return {type: UPDATE_NEW_POST_TEXT, newText: text}\r\n}\r\nexport const sendMessageCreator = () => {\r\n    return {\r\n        type: SEND_MESSAGE\r\n    }\r\n}\r\nexport const updateNewMessageBodyCreator = (body) => {\r\n    return { type: UPDATE_NEW_MESSAGE_BODY, body: body}\r\n}\r\n\r\n\r\nexport const addPostCarCreator = () => {\r\n    return {\r\n        type: SEND_CAR\r\n    }\r\n}\r\nexport const updateNewPostTextCarCreator = (newCar) => {\r\n    return {type: UPDATE_NEW_MESSAGE_CAR, newCar: newCar}\r\n}\r\n\r\n\r\nexport default store;\r\nwindow.state = store;\r\n"]},"metadata":{},"sourceType":"module"}