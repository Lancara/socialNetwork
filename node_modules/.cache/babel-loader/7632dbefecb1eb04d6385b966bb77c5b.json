{"ast":null,"code":"import { profileAPI, userAPI } from \"../api/api\";\nconst ADD_POST = 'ADD-POST';\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\nconst SET_STATUS = 'SET_STATUS';\nconst DELETE_POST = 'DELETE_POST';\nlet initialState = {\n  posts: [{\n    id: 1,\n    message: 'hi'\n  }, {\n    id: 2,\n    message: 'ho'\n  }],\n  profile: null,\n  status: ''\n};\n\nconst ProfileReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_POST:\n      return { ...state,\n        // создоем stateCopy и копируем в него  state (поверхносно)\n        newPostText: '',\n        //затираем\n        posts: [...state.posts, {\n          id: 3,\n          message: action.newPostText\n        }] //создоем новый массив и забираем элементы с помощю ... из старого  массиваи добавляем нью пост\n\n      };\n\n    case SET_STATUS:\n      return { ...state,\n        status: action.status\n      };\n\n    case SET_USER_PROFILE:\n      return { ...state,\n        profile: action.profile\n      };\n\n    case DELETE_POST:\n      return { ...state,\n        posts: state.posts.filter(p => p.id != action.postId)\n      };\n  }\n\n  return state;\n};\n\n_c = ProfileReducer;\nexport const addPostActionCreator = newPostText => {\n  return {\n    type: ADD_POST,\n    newPostText\n  };\n};\nexport const setUsersProfile = profile => {\n  return {\n    type: SET_USER_PROFILE,\n    profile\n  };\n};\nexport const setStatus = status => {\n  return {\n    type: SET_STATUS,\n    status\n  };\n};\nexport const deletePost = postId => {\n  return {\n    type: DELETE_POST,\n    postId\n  };\n};\nexport const savePhotoSuccess = photos => {\n  return {\n    type: DELETE_POST,\n    photos\n  };\n};\nexport const getUsersProfile = userId => diapatch => {\n  userAPI.getProfile(userId).then(response => {\n    diapatch(setUsersProfile(response.data));\n  });\n};\nexport const getStatus = userId => diapatch => {\n  profileAPI.getStatus(userId).then(response => {\n    diapatch(setStatus(response.data));\n  });\n};\nexport const updateStatus = status => diapatch => {\n  profileAPI.updateStatus(status) //мы статус закидываем на сервер, если он добавился прийдет ответ 0 и мы добавим его в стате\n  .then(response => {\n    if (response.data.resultCode === 0) {\n      diapatch(setStatus(status));\n    }\n  });\n};\nexport const savePhoto = file => async diapatch => {\n  let response = await profileAPI.savePhoto(file);\n\n  if (response.data.resultCode === 0) {\n    diapatch(setStatus(status));\n  }\n};\nexport default ProfileReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileReducer\");","map":{"version":3,"sources":["C:/Users/lnc/WebstormProjects/untitled1/src/redux/profile-reducer.js"],"names":["profileAPI","userAPI","ADD_POST","SET_USER_PROFILE","SET_STATUS","DELETE_POST","initialState","posts","id","message","profile","status","ProfileReducer","state","action","type","newPostText","filter","p","postId","addPostActionCreator","setUsersProfile","setStatus","deletePost","savePhotoSuccess","photos","getUsersProfile","userId","diapatch","getProfile","then","response","data","getStatus","updateStatus","resultCode","savePhoto","file"],"mappings":"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","sourcesContent":["import {profileAPI, userAPI} from \"../api/api\";\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst SET_STATUS = 'SET_STATUS';\r\nconst DELETE_POST = 'DELETE_POST';\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'hi'},\r\n        {id: 2, message: 'ho'}\r\n    ],\r\n    profile: null,\r\n    status: '',\r\n};\r\n\r\nconst ProfileReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            return {\r\n                ...state,// создоем stateCopy и копируем в него  state (поверхносно)\r\n                newPostText: '',//затираем\r\n                posts: [...state.posts, {id: 3, message: action.newPostText}]//создоем новый массив и забираем элементы с помощю ... из старого  массиваи добавляем нью пост\r\n            }\r\n\r\n        case SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status,\r\n            }\r\n        case SET_USER_PROFILE:\r\n            return {...state, profile: action.profile}\r\n\r\n        case DELETE_POST:\r\n            return {...state, posts: state.posts.filter(p => p.id != action.postId)}\r\n    }\r\n    return state;\r\n}\r\n\r\nexport const addPostActionCreator = (newPostText) => {\r\n    return {\r\n        type: ADD_POST, newPostText\r\n    }\r\n}\r\nexport const setUsersProfile = (profile) => {\r\n    return {\r\n        type: SET_USER_PROFILE, profile\r\n    }\r\n}\r\nexport const setStatus = (status) => {\r\n    return {\r\n        type: SET_STATUS, status\r\n    }\r\n}\r\nexport const deletePost = (postId) => {\r\n    return {\r\n        type: DELETE_POST, postId\r\n    }\r\n}\r\nexport const savePhotoSuccess = (photos) => {\r\n    return {\r\n        type: DELETE_POST, photos\r\n    }\r\n}\r\n\r\nexport const getUsersProfile = (userId) => (diapatch) => {\r\n    userAPI.getProfile(userId).then(response => {\r\n        diapatch(setUsersProfile(response.data));\r\n    });\r\n}\r\n\r\n\r\nexport const getStatus = (userId) => (diapatch) => {\r\n    profileAPI.getStatus(userId).then(response => {\r\n        diapatch(setStatus(response.data));\r\n    });\r\n}\r\n\r\nexport const updateStatus = (status) => (diapatch) => {\r\n    profileAPI.updateStatus(status) //мы статус закидываем на сервер, если он добавился прийдет ответ 0 и мы добавим его в стате\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                diapatch(setStatus(status));\r\n            }\r\n        });\r\n}\r\nexport const savePhoto = (file) => async (diapatch) => {\r\n    let response= await profileAPI.savePhoto(file);\r\n\r\n            if (response.data.resultCode === 0) {\r\n                diapatch(setStatus(status));\r\n            }\r\n}\r\n\r\nexport default ProfileReducer;"]},"metadata":{},"sourceType":"module"}