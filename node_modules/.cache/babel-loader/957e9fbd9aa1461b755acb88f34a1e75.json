{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lnc\\\\WebstormProjects\\\\untitled1\\\\src\\\\components\\\\Common\\\\FormsControls\\\\FormsControls.js\";\n// штука для Textarea в form\nimport React from \"react\";\nimport styles from \"./FormsControls.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FormControl = props => {\n  const hasError = meta.touched && meta.error;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.formControl + \" \" + (hasError ? styles.error : \" \"),\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", { ...input,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: props.child\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, this);\n};\n\n_c = FormControl;\nexport const Textarea = props => {\n  return /*#__PURE__*/_jsxDEV(FormControl, {\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"input\", { ...input,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 26\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 12\n  }, this);\n};\n_c2 = Textarea;\nexport const Input = _ref => {\n  let {\n    input,\n    meta,\n    ...props\n  } = _ref;\n  const hasError = meta.touched && meta.error; //в методе meta есть свойства touched (показывает тыкнули на поле или нет)\n  // error показывает есть ошибка или нет , и если поле трогали и есть ошибка (не чего не ввели )\n  // то подсветиться красным и показать сообщение meta.error (в нем сидит текст ошибки)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.formControl + \" \" + (hasError ? styles.error : \" \"),\n    children: [/*#__PURE__*/_jsxDEV(\"input\", { ...input,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: hasError && /*#__PURE__*/_jsxDEV(\"span\", {\n        children: meta.error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 30\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n_c3 = Input;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"FormControl\");\n$RefreshReg$(_c2, \"Textarea\");\n$RefreshReg$(_c3, \"Input\");","map":{"version":3,"sources":["C:/Users/lnc/WebstormProjects/untitled1/src/components/Common/FormsControls/FormsControls.js"],"names":["React","styles","FormControl","props","hasError","meta","touched","error","formControl","input","child","Textarea","Input"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAC3B,QAAOC,QAAQ,GAAGC,IAAI,CAACC,OAAL,IAAgBD,IAAI,CAACE,KAAvC;AACA,sBACI;AAAK,IAAA,SAAS,EAAEN,MAAM,CAACO,WAAP,GAAqB,GAArB,IAA4BJ,QAAQ,GAAGH,MAAM,CAACM,KAAV,GAAkB,GAAtD,CAAhB;AAAA,4BACI,yBAAcE,KAAd;AAAA,SAAyBN;AAAzB;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,gBACKA,KAAK,CAACO;AADX;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CAZD;;KAAMR,W;AAcN,OAAQ,MAAMS,QAAQ,GAAIR,KAAD,IAAW;AAEhC,sBAAO,QAAC,WAAD;AAAA,iCAAc,sBAAWM,KAAX;AAAA,SAAsBN;AAAtB;AAAA;AAAA;AAAA;AAAA,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEH,CAJO;MAAMQ,Q;AAMd,OAAQ,MAAMC,KAAK,GAAG,QAA8B;AAAA,MAA7B;AAAEH,IAAAA,KAAF;AAASJ,IAAAA,IAAT;AAAe,OAAGF;AAAlB,GAA6B;AAEhD,QAAOC,QAAQ,GAAGC,IAAI,CAACC,OAAL,IAAgBD,IAAI,CAACE,KAAvC,CAFgD,CAGhD;AACA;AACA;;AAEA,sBACI;AAAK,IAAA,SAAS,EAAEN,MAAM,CAACO,WAAP,GAAqB,GAArB,IAA4BJ,QAAQ,GAAGH,MAAM,CAACM,KAAV,GAAkB,GAAtD,CAAhB;AAAA,4BACI,sBAAWE,KAAX;AAAA,SAAsBN;AAAtB;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,gBACKC,QAAQ,iBAAI;AAAA,kBAAOC,IAAI,CAACE;AAAZ;AAAA;AAAA;AAAA;AAAA;AADjB;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CAjBO;MAAMK,K","sourcesContent":["// штука для Textarea в form\r\nimport React from \"react\";\r\nimport styles from \"./FormsControls.module.css\";\r\n\r\nconst FormControl = (props) => {\r\n    const  hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \" \")}>\r\n            <textarea {...input} {...props}/>\r\n            <div>\r\n                {props.child}\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport  const Textarea = (props) => {\r\n\r\n    return <FormControl> <input {...input} {...props}/></FormControl>\r\n\r\n}\r\n\r\nexport  const Input = ({ input, meta, ...props}) => {\r\n\r\n    const  hasError = meta.touched && meta.error;\r\n    //в методе meta есть свойства touched (показывает тыкнули на поле или нет)\r\n    // error показывает есть ошибка или нет , и если поле трогали и есть ошибка (не чего не ввели )\r\n    // то подсветиться красным и показать сообщение meta.error (в нем сидит текст ошибки)\r\n\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \" \")}>\r\n            <input {...input} {...props}/>\r\n            <div>\r\n                {hasError && <span>{meta.error}</span>}\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}