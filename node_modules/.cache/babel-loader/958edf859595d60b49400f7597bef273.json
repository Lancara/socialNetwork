{"ast":null,"code":"import { authAPI } from \"../api/api\";\nconst SET_USER_DATA = 'SET_USER_DATA';\nlet initialState = {\n  id: null,\n  email: null,\n  login: null,\n  isAuth: false //Авторизация\n\n  /*isFetching: false,*/\n\n};\n\nconst authReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.payload,\n        isAuth: true\n      };\n  }\n\n  return state;\n};\n\nexport const setAuthUserData = (id, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    id,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getAuthUserData = () => dispatch => {\n  authAPI.me().then(response => {\n    if (response.data.resultCode === 0) {\n      let {\n        id,\n        email,\n        login\n      } = response.data.data;\n      dispatch(setAuthUserData(id, email, login, true));\n    }\n  });\n};\nexport const login = (email, password, rememberMe) => dispatch => {\n  authAPI.login(email, password, rememberMe).then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(getAuthUserData());\n    }\n  });\n};\nexport const logout = () => dispatch => {\n  authAPI.logout().then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(setAuthUserData(null, null, null, true));\n    }\n  });\n}; // форм собрала данные мыло лог, передало в санку login оно  сделала запрос на сервер , если ответ положительный вызвали\n// getAuthUserData она сделала еще один запрос на сервер если все ок диспатчит setAuthUserData, добавляеться в стейт\n// потом использ isAuth что бы знать вошли мыв или нет\n\nexport default authReducer;","map":{"version":3,"sources":["C:/Users/lnc/WebstormProjects/untitled1/src/redux/auth-reducer.js"],"names":["authAPI","SET_USER_DATA","initialState","id","email","login","isAuth","authReducer","state","action","type","payload","setAuthUserData","getAuthUserData","dispatch","me","then","response","data","resultCode","password","rememberMe","logout"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,YAAtB;AAEA,MAAMC,aAAa,GAAG,eAAtB;AAGA,IAAIC,YAAY,GAAG;AACfC,EAAAA,EAAE,EAAE,IADW;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE,KAJO,CAIA;;AACf;;AALe,CAAnB;;AAQA,MAAMC,WAAW,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBN,YAAyB;AAAA,MAAXO,MAAW;;AAElD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,aAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEH,WAAGC,MAAM,CAACE,OAFP;AAGHL,QAAAA,MAAM,EAAE;AAHL,OAAP;AAFR;;AAQA,SAAOE,KAAP;AACH,CAXD;;AAaA,OAAO,MAAMI,eAAe,GAAG,CAACT,EAAD,EAAKC,KAAL,EAAYC,KAAZ,EAAmBC,MAAnB,MAAgC;AAACI,EAAAA,IAAI,EAAET,aAAP;AAAsBU,EAAAA,OAAO,EACpF;AAACR,IAAAA,EAAD;AAAKC,IAAAA,KAAL;AAAYC,IAAAA,KAAZ;AAAmBC,IAAAA;AAAnB;AADuD,CAAhC,CAAxB;AAGP,OAAO,MAAMO,eAAe,GAAG,MAAOC,QAAD,IAAc;AAC/Cd,EAAAA,OAAO,CAACe,EAAR,GAAaC,IAAb,CAAkBC,QAAQ,IAAI;AAC1B,QAAGA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAhC,EAAkC;AAC9B,UAAI;AAAChB,QAAAA,EAAD;AAAKC,QAAAA,KAAL;AAAYC,QAAAA;AAAZ,UAAqBY,QAAQ,CAACC,IAAT,CAAcA,IAAvC;AACAJ,MAAAA,QAAQ,CAACF,eAAe,CAACT,EAAD,EAAKC,KAAL,EAAYC,KAAZ,EAAmB,IAAnB,CAAhB,CAAR;AACH;AACJ,GALD;AAMH,CAPM;AAQP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAQgB,QAAR,EAAkBC,UAAlB,KAAkCP,QAAD,IAAc;AAChEd,EAAAA,OAAO,CAACK,KAAR,CAAcD,KAAd,EAAqBgB,QAArB,EAA+BC,UAA/B,EACKL,IADL,CACUC,QAAQ,IAAI;AAClB,QAAGA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAhC,EAAkC;AAClCL,MAAAA,QAAQ,CAACD,eAAe,EAAhB,CAAR;AACC;AACJ,GALD;AAMH,CAPM;AAQP,OAAO,MAAMS,MAAM,GAAG,MAAOR,QAAD,IAAc;AACtCd,EAAAA,OAAO,CAACsB,MAAR,GAAiBN,IAAjB,CAAsBC,QAAQ,IAAI;AAC9B,QAAGA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAhC,EAAkC;AAC9BL,MAAAA,QAAQ,CAACF,eAAe,CAAC,IAAD,EAAO,IAAP,EAAY,IAAZ,EAAkB,IAAlB,CAAhB,CAAR;AACH;AACJ,GAJD;AAKH,CANM,C,CAOP;AACA;AACA;;AACA,eAAeL,WAAf","sourcesContent":["import {authAPI} from \"../api/api\";\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA';\r\n\r\n\r\nlet initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false, //Авторизация\r\n    /*isFetching: false,*/\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                isAuth: true\r\n            }\r\n    }\r\n    return state;\r\n}\r\n\r\nexport const setAuthUserData = (id, email, login, isAuth ) => ({type: SET_USER_DATA, payload:\r\n        {id, email, login, isAuth}})\r\n\r\nexport const getAuthUserData = () => (dispatch) => {\r\n    authAPI.me().then(response => {\r\n        if(response.data.resultCode === 0){\r\n            let {id, email, login} = response.data.data;\r\n            dispatch(setAuthUserData(id, email, login, true));\r\n        }\r\n    });\r\n}\r\nexport const login = (email, password, rememberMe) => (dispatch) => {\r\n    authAPI.login(email, password, rememberMe)\r\n        .then(response => {\r\n        if(response.data.resultCode === 0){\r\n        dispatch(getAuthUserData())\r\n        }\r\n    });\r\n}\r\nexport const logout = () => (dispatch) => {\r\n    authAPI.logout().then(response => {\r\n        if(response.data.resultCode === 0){\r\n            dispatch(setAuthUserData(null, null,null, true));\r\n        }\r\n    });\r\n}\r\n// форм собрала данные мыло лог, передало в санку login оно  сделала запрос на сервер , если ответ положительный вызвали\r\n// getAuthUserData она сделала еще один запрос на сервер если все ок диспатчит setAuthUserData, добавляеться в стейт\r\n// потом использ isAuth что бы знать вошли мыв или нет\r\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}