{"ast":null,"code":"import _objectSpread from\"C:\\\\Users\\\\lnc\\\\WebstormProjects\\\\untitled1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\objectSpread2.js\";import _objectWithoutProperties from\"C:\\\\Users\\\\lnc\\\\WebstormProjects\\\\untitled1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\objectWithoutProperties.js\";var _excluded=[\"input\",\"meta\",\"child\"],_excluded2=[\"input\",\"meta\",\"child\"],_excluded3=[\"input\",\"meta\",\"child\"];// штука для Textarea в form\nimport React from\"react\";import styles from\"./FormsControls.module.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var FormControl=function FormControl(_ref){var input=_ref.input,meta=_ref.meta,child=_ref.child,props=_objectWithoutProperties(_ref,_excluded);var hasError=meta.touched&&meta.error;//в методе meta есть свойства touched (показывает тыкнули на поле или нет)\n// error показывает есть ошибка или нет , и если поле трогали и есть ошибка (не чего не ввели )\n// то подсветиться красным и показать сообщение meta.error (в нем сидит текст ошибки)\nreturn/*#__PURE__*/_jsxs(\"div\",{className:styles.formControl+\" \"+(hasError?styles.error:\" \"),children:[\"  \",/*#__PURE__*/_jsx(\"div\",{children:props.children}),hasError&&/*#__PURE__*/_jsx(\"span\",{children:meta.error}),\"   \"]});};export var Textarea=function Textarea(props){// Textarea получился неким контейнером  над форм контрол, поэтому передаем пропсы return <FormControl {...props}\nvar input=props.input,meta=props.meta,child=props.child,restProps=_objectWithoutProperties(props,_excluded2);// берем єто из пропс\nreturn/*#__PURE__*/_jsxs(FormControl,_objectSpread(_objectSpread({},props),{},{children:[\" \",/*#__PURE__*/_jsx(\"textarea\",_objectSpread(_objectSpread({},input),restProps))]}));// отрисовываем форм контрол и передаем деструктурированный инпут и респПропс\n};export var Input=function Input(props){var input=props.input,meta=props.meta,child=props.child,restProps=_objectWithoutProperties(props,_excluded3);return/*#__PURE__*/_jsxs(FormControl,_objectSpread(_objectSpread({},props),{},{children:[\" \",/*#__PURE__*/_jsx(\"input\",_objectSpread(_objectSpread({},input),restProps)),\" \"]}));};/*\r\nconst FormControl = ({props}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \" \")}>// при ошибке виведет className\r\n            <div>\r\n                <textarea {...input} {...props} возращаем деструктурированный знач\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>} // при ошибке виведет meta.error (в нем сидит текст ошибки)\r\n        </div>\r\n    )\r\n}\r\n*/","map":{"version":3,"sources":["C:/Users/lnc/WebstormProjects/untitled1/src/components/Common/FormsControls/FormsControls.js"],"names":["React","styles","FormControl","input","meta","child","props","hasError","touched","error","formControl","children","Textarea","restProps","Input"],"mappings":"gZAAA;AACA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,MAAP,KAAmB,4BAAnB,C,wFAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,MAAoC,IAAlCC,CAAAA,KAAkC,MAAlCA,KAAkC,CAA3BC,IAA2B,MAA3BA,IAA2B,CAArBC,KAAqB,MAArBA,KAAqB,CAAXC,KAAW,0CAEpD,GAAMC,CAAAA,QAAQ,CAAGH,IAAI,CAACI,OAAL,EAAgBJ,IAAI,CAACK,KAAtC,CACA;AACA;AACA;AACA,mBACI,aAAK,SAAS,CAAER,MAAM,CAACS,WAAP,CAAqB,GAArB,EAA4BH,QAAQ,CAAGN,MAAM,CAACQ,KAAV,CAAkB,GAAtD,CAAhB,6BACI,qBACKH,KAAK,CAACK,QADX,EADJ,CAIKJ,QAAQ,eAAI,sBAAOH,IAAI,CAACK,KAAZ,EAJjB,SADJ,CAQH,CAdD,CAgBA,MAAO,IAAMG,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACN,KAAD,CAAW,CAAC;AAChC,GAAOH,CAAAA,KAAP,CAA2CG,KAA3C,CAAOH,KAAP,CAAcC,IAAd,CAA2CE,KAA3C,CAAcF,IAAd,CAAoBC,KAApB,CAA2CC,KAA3C,CAAoBD,KAApB,CAA8BQ,SAA9B,0BAA2CP,KAA3C,aAAiD;AACjD,mBAAO,MAAC,WAAD,gCAAiBA,KAAjB,iCAA0B,+CAAcH,KAAd,EAAyBU,SAAzB,EAA1B,IAAP,CAAoF;AACvF,CAHM,CAKP,MAAO,IAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAACR,KAAD,CAAW,CAC5B,GAAOH,CAAAA,KAAP,CAA2CG,KAA3C,CAAOH,KAAP,CAAcC,IAAd,CAA2CE,KAA3C,CAAcF,IAAd,CAAoBC,KAApB,CAA2CC,KAA3C,CAAoBD,KAApB,CAA8BQ,SAA9B,0BAA2CP,KAA3C,aACA,mBAAO,MAAC,WAAD,gCAAkBA,KAAlB,iCAA0B,4CAAWH,KAAX,EAAsBU,SAAtB,EAA1B,QAAP,CACH,CAHM,CAOP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// штука для Textarea в form\r\nimport React from \"react\";\r\nimport styles from \"./FormsControls.module.css\";\r\n\r\nconst FormControl = ({input, meta, child, ...props}) => {\r\n\r\n    const hasError = meta.touched && meta.error;\r\n    //в методе meta есть свойства touched (показывает тыкнули на поле или нет)\r\n    // error показывает есть ошибка или нет , и если поле трогали и есть ошибка (не чего не ввели )\r\n    // то подсветиться красным и показать сообщение meta.error (в нем сидит текст ошибки)\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \" \")}>  {/*при ошибке виведет className*/}\r\n            <div>\r\n                {props.children}\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}   {/*при ошибке виведет meta.error (в нем сидит текст ошибки)*/}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props) => {// Textarea получился неким контейнером  над форм контрол, поэтому передаем пропсы return <FormControl {...props}\r\n    const {input, meta, child, ...restProps} = props;// берем єто из пропс\r\n    return <FormControl {...props} > <textarea {...input} {...restProps}/></FormControl>// отрисовываем форм контрол и передаем деструктурированный инпут и респПропс\r\n}\r\n\r\nexport const Input = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl  {...props}> <input {...input} {...restProps} /> </FormControl>\r\n}\r\n\r\n\r\n\r\n/*\r\nconst FormControl = ({props}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \" \")}>// при ошибке виведет className\r\n            <div>\r\n                <textarea {...input} {...props} возращаем деструктурированный знач\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>} // при ошибке виведет meta.error (в нем сидит текст ошибки)\r\n        </div>\r\n    )\r\n}\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}