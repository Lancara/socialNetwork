{"ast":null,"code":"import { authAPI } from \"../api/api\";\nimport { getAuthUserData } from \"./auth-reducer\";\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS';\nlet initialState = {\n  initialized: false // инициализация\n\n};\n\nconst appReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case INITIALIZED_SUCCESS:\n      return { ...state,\n        initialized: true\n      };\n  }\n\n  return state;\n};\n\nexport const initializedSuccess = () => ({\n  type: INITIALIZED_SUCCESS\n});\nexport const initializeApp = () => dispatch => {\n  let promise = dispatch(getAuthUserData());\n  promise.then(() => {\n    dispatch(initializedSuccess());\n  }); //  МЫ получаем ретурн из getAuthUserData и записываем его в промис когда это произойдет мы задиспатчим initializedSuccess\n}; // это все нужно для: пока  асинхронные операции не закончатся мы не чего не показывали пользователю (не было маргания страниц)\n\nexport default appReducer;","map":{"version":3,"sources":["C:/Users/lnc/WebstormProjects/untitled1/src/redux/app-reducer.js"],"names":["authAPI","getAuthUserData","INITIALIZED_SUCCESS","initialState","initialized","appReducer","state","action","type","initializedSuccess","initializeApp","dispatch","promise","then"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,YAAtB;AACA,SAAQC,eAAR,QAA8B,gBAA9B;AAEA,MAAMC,mBAAmB,GAAG,qBAA5B;AAGA,IAAIC,YAAY,GAAG;AACfC,EAAAA,WAAW,EAAE,KADE,CACK;;AADL,CAAnB;;AAIA,MAAMC,UAAU,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBH,YAAyB;AAAA,MAAXI,MAAW;;AAEjD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKN,mBAAL;AACI,aAAO,EACH,GAAGI,KADA;AAEHF,QAAAA,WAAW,EAAE;AAFV,OAAP;AAFR;;AAOA,SAAOE,KAAP;AACH,CAVD;;AAYA,OAAO,MAAMG,kBAAkB,GAAG,OAAO;AACrCD,EAAAA,IAAI,EAAEN;AAD+B,CAAP,CAA3B;AAIP,OAAO,MAAMQ,aAAa,GAAG,MAAOC,QAAD,IAAc;AAC7C,MAAIC,OAAO,GAAGD,QAAQ,CAACV,eAAe,EAAhB,CAAtB;AAEAW,EAAAA,OAAO,CAACC,IAAR,CAAa,MAAM;AACfF,IAAAA,QAAQ,CAACF,kBAAkB,EAAnB,CAAR;AACH,GAFD,EAH6C,CAMjD;AACC,CAPM,C,CAOL;;AAEF,eAAeJ,UAAf","sourcesContent":["import {authAPI} from \"../api/api\";\r\nimport {getAuthUserData} from \"./auth-reducer\";\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS';\r\n\r\n\r\nlet initialState = {\r\n    initialized: false, // инициализация\r\n};\r\n\r\nconst appReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n    }\r\n    return state;\r\n}\r\n\r\nexport const initializedSuccess = () => ({\r\n    type: INITIALIZED_SUCCESS\r\n})\r\n\r\nexport const initializeApp = () => (dispatch) => {\r\n    let promise = dispatch(getAuthUserData());\r\n\r\n    promise.then(() => {\r\n        dispatch(initializedSuccess());\r\n    })\r\n//  МЫ получаем ретурн из getAuthUserData и записываем его в промис когда это произойдет мы задиспатчим initializedSuccess\r\n} // это все нужно для: пока  асинхронные операции не закончатся мы не чего не показывали пользователю (не было маргания страниц)\r\n\r\nexport default appReducer;"]},"metadata":{},"sourceType":"module"}