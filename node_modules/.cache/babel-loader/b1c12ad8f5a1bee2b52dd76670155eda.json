{"ast":null,"code":"import _objectSpread from\"C:\\\\Users\\\\lnc\\\\WebstormProjects\\\\untitled1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\objectSpread2.js\";import{authAPI}from\"../api/api\";import{getAuthUserData}from\"./auth-reducer\";var INITIALIZED_SUCCESS='INITIALIZED_SUCCESS';var initialState={initialized:false// инициализация\n};var appReducer=function appReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case INITIALIZED_SUCCESS:return _objectSpread(_objectSpread({},state),{},{initialized:true});}return state;};export var initializedSuccess=function initializedSuccess(){return{type:INITIALIZED_SUCCESS};};export var initializeApp=function initializeApp(){return function(dispatch){var promise=dispatch(getAuthUserData());promise.then(function(){dispatch(initializedSuccess());});//  МЫ получаем ретурн из getAuthUserData и записываем его в промис когда это произойдет мы задиспатчим initializedSuccess\n};};// это все нужно для: пока  асинхронные операции не закончатся мы не чего не показывали пользователю (не было маргания страниц)\nexport default appReducer;","map":{"version":3,"sources":["C:/Users/lnc/WebstormProjects/untitled1/src/redux/app-reducer.js"],"names":["authAPI","getAuthUserData","INITIALIZED_SUCCESS","initialState","initialized","appReducer","state","action","type","initializedSuccess","initializeApp","dispatch","promise","then"],"mappings":"sIAAA,OAAQA,OAAR,KAAsB,YAAtB,CACA,OAAQC,eAAR,KAA8B,gBAA9B,CAEA,GAAMC,CAAAA,mBAAmB,CAAG,qBAA5B,CAGA,GAAIC,CAAAA,YAAY,CAAG,CACfC,WAAW,CAAE,KAAO;AADL,CAAnB,CAIA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAkC,IAAjCC,CAAAA,KAAiC,2DAAzBH,YAAyB,IAAXI,CAAAA,MAAW,2CAEjD,OAAQA,MAAM,CAACC,IAAf,EACI,IAAKN,CAAAA,mBAAL,CACI,sCACOI,KADP,MAEIF,WAAW,CAAE,IAFjB,GAFR,CAOA,MAAOE,CAAAA,KAAP,CACH,CAVD,CAYA,MAAO,IAAMG,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,SAAO,CACrCD,IAAI,CAAEN,mBAD+B,CAAP,EAA3B,CAIP,MAAO,IAAMQ,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,SAAM,UAACC,QAAD,CAAc,CAC7C,GAAIC,CAAAA,OAAO,CAAGD,QAAQ,CAACV,eAAe,EAAhB,CAAtB,CAEAW,OAAO,CAACC,IAAR,CAAa,UAAM,CACfF,QAAQ,CAACF,kBAAkB,EAAnB,CAAR,CACH,CAFD,EAGJ;AACC,CAP4B,EAAtB,CAOL;AAEF,cAAeJ,CAAAA,UAAf","sourcesContent":["import {authAPI} from \"../api/api\";\r\nimport {getAuthUserData} from \"./auth-reducer\";\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS';\r\n\r\n\r\nlet initialState = {\r\n    initialized: false, // инициализация\r\n};\r\n\r\nconst appReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n    }\r\n    return state;\r\n}\r\n\r\nexport const initializedSuccess = () => ({\r\n    type: INITIALIZED_SUCCESS\r\n})\r\n\r\nexport const initializeApp = () => (dispatch) => {\r\n    let promise = dispatch(getAuthUserData());\r\n\r\n    promise.then(() => {\r\n        dispatch(initializedSuccess());\r\n    })\r\n//  МЫ получаем ретурн из getAuthUserData и записываем его в промис когда это произойдет мы задиспатчим initializedSuccess\r\n} // это все нужно для: пока  асинхронные операции не закончатся мы не чего не показывали пользователю (не было маргания страниц)\r\n\r\nexport default appReducer;"]},"metadata":{},"sourceType":"module"}