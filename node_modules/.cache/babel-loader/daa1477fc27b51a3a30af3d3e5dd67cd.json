{"ast":null,"code":"import _asyncToGenerator from\"C:\\\\Users\\\\lnc\\\\WebstormProjects\\\\untitled1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";import _objectSpread from\"C:\\\\Users\\\\lnc\\\\WebstormProjects\\\\untitled1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\objectSpread2.js\";import _regeneratorRuntime from\"C:\\\\Users\\\\lnc\\\\WebstormProjects\\\\untitled1\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";import{authAPI}from\"../api/api\";import{stopSubmit}from\"redux-form\";var SET_USER_DATA='SET_USER_DATA';var initialState={id:null,email:null,login:null,isAuth:false//Авторизация\n/*isFetching: false,*/};var authReducer=function authReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case SET_USER_DATA:return _objectSpread(_objectSpread({},state),action.payload);}return state;};export var setAuthUserData=function setAuthUserData(id,email,login,isAuth){return{type:SET_USER_DATA,payload:{id:id,email:email,login:login,isAuth:isAuth}};};export var getAuthUserData=function getAuthUserData(){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var response,_response$data$data,id,email,_login;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return authAPI.me();case 2:response=_context.sent;// ответ приходит из  authAPI.me (для синтаксиса await) и передает значение в response\nif(response.data.resultCode===0){_response$data$data=response.data.data,id=_response$data$data.id,email=_response$data$data.email,_login=_response$data$data.login;dispatch(setAuthUserData(id,email,_login,true));}case 4:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();};export var login=function login(email,password,rememberMe){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){var response;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return authAPI.login(email,password,rememberMe);case 2:response=_context2.sent;if(response.data.resultCode===0){dispatch(getAuthUserData());}case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}();};// пример с then\nexport var logout=function logout(){return function(dispatch){authAPI.logout().then(function(response){if(response.data.resultCode===0){dispatch(setAuthUserData(null,null,null,false));}});};};// форм собрала данные мыло лог, передало в санку login оно  сделала запрос на сервер , если ответ положительный вызвали\n// getAuthUserData она сделала еще один запрос на сервер если все ок диспатчит setAuthUserData, добавляеться в стейт\n// потом использ isAuth что бы знать вошли мыв или нет\nexport default authReducer;","map":{"version":3,"sources":["C:/Users/lnc/WebstormProjects/untitled1/src/redux/auth-reducer.js"],"names":["authAPI","stopSubmit","SET_USER_DATA","initialState","id","email","login","isAuth","authReducer","state","action","type","payload","setAuthUserData","getAuthUserData","dispatch","me","response","data","resultCode","password","rememberMe","logout","then"],"mappings":"sZAAA,OAAQA,OAAR,KAAsB,YAAtB,CACA,OAAQC,UAAR,KAAyB,YAAzB,CAEA,GAAMC,CAAAA,aAAa,CAAG,eAAtB,CAGA,GAAIC,CAAAA,YAAY,CAAG,CACfC,EAAE,CAAE,IADW,CAEfC,KAAK,CAAE,IAFQ,CAGfC,KAAK,CAAE,IAHQ,CAIfC,MAAM,CAAE,KAAO;AACf,sBALe,CAAnB,CAQA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAkC,IAAjCC,CAAAA,KAAiC,2DAAzBN,YAAyB,IAAXO,CAAAA,MAAW,2CAElD,OAAQA,MAAM,CAACC,IAAf,EACI,IAAKT,CAAAA,aAAL,CACI,sCACOO,KADP,EAEOC,MAAM,CAACE,OAFd,EAFR,CAOA,MAAOH,CAAAA,KAAP,CACH,CAVD,CAYA,MAAO,IAAMI,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACT,EAAD,CAAKC,KAAL,CAAYC,KAAZ,CAAmBC,MAAnB,QAA+B,CAC1DI,IAAI,CAAET,aADoD,CACrCU,OAAO,CACxB,CAACR,EAAE,CAAFA,EAAD,CAAKC,KAAK,CAALA,KAAL,CAAYC,KAAK,CAALA,KAAZ,CAAmBC,MAAM,CAANA,MAAnB,CAFsD,CAA/B,EAAxB,CAKP,MAAO,IAAMO,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,kGAAM,iBAAOC,QAAP,yLACZf,CAAAA,OAAO,CAACgB,EAAR,EADY,QAC7BC,QAD6B,eACE;AAEnC,GAAIA,QAAQ,CAACC,IAAT,CAAcC,UAAd,GAA6B,CAAjC,CAAoC,qBACPF,QAAQ,CAACC,IAAT,CAAcA,IADP,CAC3Bd,EAD2B,qBAC3BA,EAD2B,CACvBC,KADuB,qBACvBA,KADuB,CAChBC,MADgB,qBAChBA,KADgB,CAEhCS,QAAQ,CAACF,eAAe,CAACT,EAAD,CAAKC,KAAL,CAAYC,MAAZ,CAAmB,IAAnB,CAAhB,CAAR,CACH,CANgC,sDAAN,gEAAxB,CASP,MAAO,IAAMA,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAACD,KAAD,CAAQe,QAAR,CAAkBC,UAAlB,kGAAiC,kBAAON,QAAP,0JAC7Bf,CAAAA,OAAO,CAACM,KAAR,CAAcD,KAAd,CAAqBe,QAArB,CAA+BC,UAA/B,CAD6B,QAC9CJ,QAD8C,gBAGlD,GAAIA,QAAQ,CAACC,IAAT,CAAcC,UAAd,GAA6B,CAAjC,CAAoC,CAChCJ,QAAQ,CAACD,eAAe,EAAhB,CAAR,CACH,CALiD,wDAAjC,kEAAd,CAOP;AACA,MAAO,IAAMQ,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,SAAM,UAACP,QAAD,CAAc,CACtCf,OAAO,CAACsB,MAAR,GACKC,IADL,CACU,SAAAN,QAAQ,CAAI,CACd,GAAIA,QAAQ,CAACC,IAAT,CAAcC,UAAd,GAA6B,CAAjC,CAAoC,CAChCJ,QAAQ,CAACF,eAAe,CAAC,IAAD,CAAO,IAAP,CAAa,IAAb,CAAmB,KAAnB,CAAhB,CAAR,CACH,CACJ,CALL,EAMH,CAPqB,EAAf,CAQP;AACA;AACA;AACA,cAAeL,CAAAA,WAAf","sourcesContent":["import {authAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA';\r\n\r\n\r\nlet initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false, //Авторизация\r\n    /*isFetching: false,*/\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n    }\r\n    return state;\r\n}\r\n\r\nexport const setAuthUserData = (id, email, login, isAuth) => ({\r\n    type: SET_USER_DATA, payload:\r\n        {id, email, login, isAuth}\r\n})\r\n\r\nexport const getAuthUserData = () => async (dispatch) => { //результат работы асинхронной функции возрощение промиса( дожидаемся промисса не от then а от await, результат тодже а код короче)\r\n    let response = await authAPI.me(); // ответ приходит из  authAPI.me (для синтаксиса await) и передает значение в response\r\n\r\n    if (response.data.resultCode === 0) {\r\n        let {id, email, login} = response.data.data;\r\n        dispatch(setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\n\r\nexport const login = (email, password, rememberMe) => async (dispatch) => {\r\n    let response = await authAPI.login(email, password, rememberMe)\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserData())\r\n    }\r\n}\r\n// пример с then\r\nexport const logout = () => (dispatch) => {\r\n    authAPI.logout()\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setAuthUserData(null, null, null, false));\r\n            }\r\n        });\r\n}\r\n// форм собрала данные мыло лог, передало в санку login оно  сделала запрос на сервер , если ответ положительный вызвали\r\n// getAuthUserData она сделала еще один запрос на сервер если все ок диспатчит setAuthUserData, добавляеться в стейт\r\n// потом использ isAuth что бы знать вошли мыв или нет\r\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}