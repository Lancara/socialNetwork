{"ast":null,"code":"const FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET_USERS';\nlet initialState = {\n  users: [],\n  pageSize: 5,\n  totalUsersCount: 0\n};\n\nconst usersReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FOLLOW:\n      return { ...state,\n        // создаем копию стейта\n        users: state.users.map(u => {\n          // делам копию users и спомощью меп создаем по одному элементу и\n          if (u.id === action.userID) {\n            // заходим внутирь , если id совпадает с id из екшин то меняем followed\n            return { ...u,\n              followed: true\n            }; // и добавляем измененный(скопированній) элемент в наш   массив,\n          } // если id не совпадает то возращаем элемент без изменений\n\n\n          return u;\n        })\n      };\n\n    case UNFOLLOW:\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userID) {\n            return { ...u,\n              followed: false\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case SET_USERS:\n      {\n        return { ...state,\n          users: [...state.users, ...action.users]\n        };\n      }\n  }\n\n  return state;\n};\n\nexport const followAC = userID => ({\n  type: FOLLOW,\n  userID\n});\nexport const unfollowAC = userID => ({\n  type: UNFOLLOW,\n  userID\n});\nexport const setUsersAC = users => ({\n  type: SET_USERS,\n  users\n});\nexport default usersReducer;","map":{"version":3,"sources":["C:/Users/lnc/WebstormProjects/untitled1/src/redux/users-reducer.js"],"names":["FOLLOW","UNFOLLOW","SET_USERS","initialState","users","pageSize","totalUsersCount","usersReducer","state","action","type","map","u","id","userID","followed","followAC","unfollowAC","setUsersAC"],"mappings":"AAAA,MAAMA,MAAM,GAAG,QAAf;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,SAAS,GAAG,WAAlB;AAGA,IAAIC,YAAY,GAAG;AACfC,EAAAA,KAAK,EAAE,EADQ;AAEfC,EAAAA,QAAQ,EAAC,CAFM;AAGfC,EAAAA,eAAe,EAAE;AAHF,CAAnB;;AAMA,MAAMC,YAAY,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBL,YAAyB;AAAA,MAAXM,MAAW;;AAEnD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKV,MAAL;AACI,aAAO,EACH,GAAGQ,KADA;AACmC;AACtCJ,QAAAA,KAAK,EAAEI,KAAK,CAACJ,KAAN,CAAYO,GAAZ,CAAgBC,CAAC,IAAI;AAAU;AAClC,cAAIA,CAAC,CAACC,EAAF,KAASJ,MAAM,CAACK,MAApB,EAA4B;AAAM;AAC9B,mBAAO,EAAC,GAAGF,CAAJ;AAAOG,cAAAA,QAAQ,EAAE;AAAjB,aAAP,CADwB,CACM;AACjC,WAHuB,CAGU;;;AAClC,iBAAOH,CAAP;AACH,SALM;AAFJ,OAAP;;AAUJ,SAAKX,QAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEHJ,QAAAA,KAAK,EAAEI,KAAK,CAACJ,KAAN,CAAYO,GAAZ,CAAkBC,CAAC,IAAI;AAC1B,cAAIA,CAAC,CAACC,EAAF,KAASJ,MAAM,CAACK,MAApB,EAA2B;AACvB,mBAAO,EAAE,GAAGF,CAAL;AAAQG,cAAAA,QAAQ,EAAE;AAAlB,aAAP;AACH;;AACD,iBAAOH,CAAP;AACH,SALM;AAFJ,OAAP;;AAUJ,SAAKV,SAAL;AAAe;AACX,eAAO,EAAE,GAAGM,KAAL;AAAYJ,UAAAA,KAAK,EAAE,CAAC,GAAGI,KAAK,CAACJ,KAAV,EAAiB,GAAGK,MAAM,CAACL,KAA3B;AAAnB,SAAP;AACH;AAzBL;;AA2BA,SAAOI,KAAP;AACH,CA9BD;;AAgCA,OAAO,MAAMQ,QAAQ,GAAIF,MAAD,KAAa;AAACJ,EAAAA,IAAI,EAAEV,MAAP;AAAec,EAAAA;AAAf,CAAb,CAAjB;AACP,OAAO,MAAMG,UAAU,GAAIH,MAAD,KAAa;AAACJ,EAAAA,IAAI,EAAET,QAAP;AAAiBa,EAAAA;AAAjB,CAAb,CAAnB;AACP,OAAO,MAAMI,UAAU,GAAId,KAAD,KAAY;AAACM,EAAAA,IAAI,EAAER,SAAP;AAAkBE,EAAAA;AAAlB,CAAZ,CAAnB;AAEP,eAAeG,YAAf","sourcesContent":["const FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\n\r\n\r\nlet initialState = {\r\n    users: [ ],\r\n    pageSize:5,\r\n    totalUsersCount: 0,\r\n};\r\n\r\nconst usersReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,                             // создаем копию стейта\r\n                users: state.users.map(u => {         // делам копию users и спомощью меп создаем по одному элементу и\r\n                    if (u.id === action.userID) {     // заходим внутирь , если id совпадает с id из екшин то меняем followed\r\n                        return {...u, followed: true} // и добавляем измененный(скопированній) элемент в наш   массив,\r\n                    }                                 // если id не совпадает то возращаем элемент без изменений\r\n                    return u;\r\n                })\r\n            }\r\n\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map ( u => {\r\n                    if (u.id === action.userID){\r\n                        return { ...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n\r\n        case SET_USERS:{\r\n            return { ...state, users: [...state.users, ...action.users]}\r\n        }\r\n    }\r\n    return state;\r\n}\r\n\r\nexport const followAC = (userID) => ({type: FOLLOW, userID})\r\nexport const unfollowAC = (userID) => ({type: UNFOLLOW, userID})\r\nexport const setUsersAC = (users) => ({type: SET_USERS, users})\r\n\r\nexport default usersReducer;"]},"metadata":{},"sourceType":"module"}